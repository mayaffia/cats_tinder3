// Mocks generated by Mockito 5.4.6 from annotations
// in cats_tinder/test/cat_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:cats_tinder/data/api_service.dart' as _i4;
import 'package:cats_tinder/data/database_service.dart' as _i6;
import 'package:cats_tinder/domain/models/cat.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCat_0 extends _i1.SmartFake implements _i2.Cat {
  _FakeCat_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDatabase_1 extends _i1.SmartFake implements _i3.Database {
  _FakeDatabase_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiService extends _i1.Mock implements _i4.ApiService {
  MockApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected), returnValue: false)
          as bool);

  @override
  _i5.Stream<bool> get connectionStatus =>
      (super.noSuchMethod(
            Invocation.getter(#connectionStatus),
            returnValue: _i5.Stream<bool>.empty(),
          )
          as _i5.Stream<bool>);

  @override
  _i5.Future<_i2.Cat> fetchRandomCat() =>
      (super.noSuchMethod(
            Invocation.method(#fetchRandomCat, []),
            returnValue: _i5.Future<_i2.Cat>.value(
              _FakeCat_0(this, Invocation.method(#fetchRandomCat, [])),
            ),
          )
          as _i5.Future<_i2.Cat>);
}

/// A class which mocks [DatabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseService extends _i1.Mock implements _i6.DatabaseService {
  MockDatabaseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Database> get database =>
      (super.noSuchMethod(
            Invocation.getter(#database),
            returnValue: _i5.Future<_i3.Database>.value(
              _FakeDatabase_1(this, Invocation.getter(#database)),
            ),
          )
          as _i5.Future<_i3.Database>);

  @override
  _i5.Future<int> insertCat(_i2.Cat? cat) =>
      (super.noSuchMethod(
            Invocation.method(#insertCat, [cat]),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  _i5.Future<List<_i2.Cat>> getLikedCats() =>
      (super.noSuchMethod(
            Invocation.method(#getLikedCats, []),
            returnValue: _i5.Future<List<_i2.Cat>>.value(<_i2.Cat>[]),
          )
          as _i5.Future<List<_i2.Cat>>);

  @override
  _i5.Future<void> deleteCat(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteCat, [id]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<bool> isCatLiked(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#isCatLiked, [id]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);
}
